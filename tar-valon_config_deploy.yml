---
- name: Deploy Docker Service Configurations (Ownership-aware & verbose)
  hosts:
    - rinoa
    - rikku
    - benedikta
  gather_facts: false

  vars:
    default_owner: "1000"
    default_group: "1000"
    default_mode: "0644"
    # file_metadata should be defined in host_vars/<host>.yml:
    # file_metadata:
    #   "configs/serviceA/config.yaml":
    #     owner: "999"
    #     group: "999"
    #     mode: "0640"

  pre_tasks:
    - name: Get remote user's UID and GID
      ansible.builtin.command: "id -u && id -g"
      register: remote_user_info
      changed_when: false
      ignore_errors: true

    - name: Set remote user's UID and GID facts
      ansible.builtin.set_fact:
        remote_uid: "{{ remote_user_info.stdout_lines[0] | default(default_owner) | int }}"
        remote_gid: "{{ remote_user_info.stdout_lines[1] | default(default_group) | int }}"

    - name: Annotate file metadata with become requirement
      ansible.builtin.set_fact:
        file_metadata_with_become: >-
          {{
            (file_metadata | default({})) | dict2items
            | map('combine', {
                'value': item.value | combine({
                  'owner': (item.value.owner | default(default_owner) | string),
                  'group': (item.value.group | default(default_group) | string),
                  'mode':  (item.value.mode  | default(default_mode)  | string),
                  'become': (
                    ((item.value.owner | default(default_owner) | int) != remote_uid) or
                    ((item.value.group | default(default_group) | int) != remote_gid)
                  )
                })
              })
            | items2dict
          }}

    - name: Find all files for this host (control node)
      ansible.builtin.find:
        paths: "{{ template_base_path }}/{{ inventory_hostname }}"
        recurse: true
      register: host_files
      delegate_to: localhost
      run_once: true
      changed_when: false

    - name: Build list of unique destination directories
      ansible.builtin.set_fact:
        dest_dirs: >-
          {{
            host_files.files
            | map(attribute='path')
            | map('relpath', template_base_path ~ '/' ~ inventory_hostname)
            | map('dirname')
            | map('regex_replace', '^(.*)$', appdata_base_path ~ '/\1')
            | unique
            | list
          }}
      changed_when: false

    - name: Build flat file deployment spec list
      ansible.builtin.set_fact:
        deploy_files: >-
          {{
            host_files.files
            | map('extract', attribute='path')
            | map('community.general.dict_kv', item => {
                'src': item,
                'dest': appdata_base_path ~ '/' ~ (item | relpath(template_base_path ~ '/' ~ inventory_hostname) | regex_replace('\.j2$', '')),
                'owner': file_metadata_with_become[item | relpath(template_base_path ~ '/' ~ inventory_hostname)]?.owner | default(default_owner),
                'group': file_metadata_with_become[item | relpath(template_base_path ~ '/' ~ inventory_hostname)]?.group | default(default_group),
                'mode': file_metadata_with_become[item | relpath(template_base_path ~ '/' ~ inventory_hostname)]?.mode | default(default_mode),
                'become': file_metadata_with_become[item | relpath(template_base_path ~ '/' ~ inventory_hostname)]?.become | default(false),
                'is_template': item.endswith('.j2')
              })
            | list
          }}

    - name: Log computed deployment metadata
      ansible.builtin.debug:
        msg: >-
          Deployment plan:
          {% for f in deploy_files %}
          - src: {{ f.src }}
            dest: {{ f.dest }}
            owner: {{ f.owner }}
            group: {{ f.group }}
            mode: {{ f.mode }}
            become: {{ f.become }}
            template: {{ f.is_template }}
          {% endfor %}
      run_once: true

    - name: Print concise become true list
      ansible.builtin.debug:
        msg: >-
          Files requiring become=true:
          {% set found = false %}
          {% for f in deploy_files if f.become %}
          {% set found = true %}
          - {{ f.dest }} -> owner:{{ f.owner }}:{{ f.group }} mode:{{ f.mode }}
          {% endfor %}
          {% if not found %}
          (none)
          {% endif %}
      run_once: true

  tasks:
    - name: Ensure destination directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop: "{{ dest_dirs }}"
      loop_control:
        label: "{{ item }}"

    - name: Deploy template files
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      loop: "{{ deploy_files | selectattr('is_template') | list }}"
      loop_control:
        label: "{{ item.src }}"
      become: "{{ item.become }}"

    - name: Deploy static files
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
        remote_src: false
      loop: "{{ deploy_files | rejectattr('is_template') | list }}"
      loop_control:
        label: "{{ item.src }}"
      become: "{{ item.become }}"
