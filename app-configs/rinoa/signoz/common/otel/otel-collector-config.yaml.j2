receivers:
  httplogreceiver/json:
    endpoint: 0.0.0.0:8082
    source: json

  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  hostmetrics:
    collection_interval: 60s
    scrapers:
      cpu: {}
      load: {}
      memory: {}
      disk: {}
      filesystem: {}
      network: {}

  filelog/nginx-access-logs:
    include: ["${env:NGINX_ACCESS_LOG_FILE}"]
    operators:
      - type: regex_parser
        regex: '^(?P<remote_addr>[0-9\.]+) - (?P<remote_user>[^\s]+) \[(?P<ts>.+)\] "(?P<request_method>\w+?) (?P<request_path>.+?)" (?P<status>[0-9]+) (?P<body_bytes_sent>[0-9]+) "(?P<http_referrer>.+?)" "(?P<http_user_agent>.+?)"$'
        parse_from: body
        parse_to: attributes
        timestamp:
          parse_from: attributes.ts
          layout: "02/Jan/2006:15:04:05 -0700"
          layout_type: gotime
        severity:
          parse_from: attributes.status
          overwrite_text: true
          mapping:
            debug: "1xx"
            info: ["2xx", "3xx"]
            warn: "4xx"
            error: "5xx"
      - type: remove
        field: attributes.ts
      - type: add
        field: attributes.source
        value: nginx

  filelog/nginx-error-logs:
    include: ["${env:NGINX_ERROR_LOG_FILE}"]
    operators:
      - type: regex_parser
        regex: '^(?P<ts>.+?) \[(?P<log_level>\w+)\] (?P<pid>\d+)#(?P<tid>\d+). \*(?P<cid>\d+) (?P<message>.+)$'
        parse_from: body
        parse_to: attributes
        timestamp:
          parse_from: attributes.ts
          layout: "2006/01/02 15:04:05"
          layout_type: gotime
        severity:
          parse_from: attributes.log_level
          overwrite_text: true
          mapping:
            debug: "debug"
            info: ["info", "notice"]
            warn: "warn"
            error: ["error", "crit", "alert"]
            fatal: "emerg"
      - type: remove
        field: attributes.ts
      - type: move
        from: attributes.message
        to: body
      - type: add
        field: attributes.source
        value: nginx

  prometheus:
    config:
      global:
        scrape_interval: 60s
      scrape_configs:
        - job_name: "apprise-api"
          static_configs:
            - targets: ["apprise-api:8000"]
        - job_name: "authelia"
          static_configs:
            - targets: ["authelia:9959"]
        - job_name: "cloudflared"
          static_configs:
            - targets: ["cloudflared-agent-dockflared-tunnel:20119"]
        - job_name: "dawarich"
          static_configs:
            - targets: ["dawarich-app:9394"]
        - job_name: "gitea"
          static_configs:
            - targets: ["gitea:3000"]
        - job_name: "immich"
          static_configs:
            - targets: ["immich-server:8081", "immich-server:8082"]
        - job_name: "mongodb"
          static_configs:
            - targets: ["mongodb-exporter:9216"]
        - job_name: "otel-collector"
          static_configs:
            - targets: ["localhost:8888"]
        - job_name: "scraparr"
          static_configs:
            - targets: ["scraparr:7100"]

processors:
  batch:
    send_batch_size: 10000
    send_batch_max_size: 11000
    timeout: 10s

  resourcedetection:
    detectors: [env, system]
    timeout: 2s
    system:
      hostname_sources: ["dns", "os"]

  resourcedetection/docker:
    detectors: [env, docker]
    timeout: 2s
    override: false

  signozspanmetrics/delta:
    metrics_exporter: signozclickhousemetrics
    metrics_flush_interval: 60s
    latency_histogram_buckets: [100us, 1ms, 2ms, 6ms, 10ms, 50ms, 100ms, 250ms, 500ms, 1000ms, 1400ms, 2000ms, 5s, 10s, 20s, 40s, 60s]
    dimensions_cache_size: 100000
    aggregation_temporality: AGGREGATION_TEMPORALITY_DELTA
    enable_exp_histogram: true
    dimensions:
      - name: service.namespace
        default: default
      - name: deployment.environment
        default: default
      - name: signoz.collector.id
      - name: service.version
      - name: browser.platform
      - name: browser.mobile
      - name: k8s.cluster.name
      - name: k8s.node.name
      - name: k8s.namespace.name
      - name: host.name
      - name: host.type
      - name: container.name

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  pprof:
    endpoint: 0.0.0.0:1777

exporters:
  clickhousetraces:
    datasource: tcp://signoz-clickhouse:9000/signoz_traces
    low_cardinal_exception_grouping: ${env:LOW_CARDINAL_EXCEPTION_GROUPING}
    use_new_schema: true

  signozclickhousemetrics:
    dsn: tcp://signoz-clickhouse:9000/signoz_metrics

  clickhouselogsexporter:
    dsn: tcp://signoz-clickhouse:9000/signoz_logs
    timeout: 10s
    use_new_schema: true

  otlp/nginx-logs:
    endpoint: "localhost:4317"
    tls:
      insecure: true

service:
  telemetry:
    logs:
      encoding: json
  extensions:
    - health_check
    - pprof
  pipelines:
    traces:
      receivers: [otlp]
      processors: [signozspanmetrics/delta, batch]
      exporters: [clickhousetraces]

    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [signozclickhousemetrics]

    metrics/hostmetrics:
      receivers: [hostmetrics]
      processors: [resourcedetection]
      exporters: [otlp/nginx-logs]

    metrics/prometheus:
      receivers: [prometheus]
      processors: [batch]
      exporters: [signozclickhousemetrics]

    logs:
      receivers: [otlp, httplogreceiver/json, filelog/nginx-access-logs, filelog/nginx-error-logs]
      processors: [batch]
      exporters: [clickhouselogsexporter]
